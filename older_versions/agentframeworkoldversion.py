import randomclass Agent:        def __init__(self, environment, agents):        """        environment : 2D list. Should be a square matrix (2D list)        size : int. The size of the environment, i.e the dimension of the matrix        agents: list of Agent().                  x, y : private variables.                """        self.environment = environment        self.store = 0        self._size = len(environment)        self.agents = agents        self.__x = random.randint(0, self._size)        self.__y = random.randint(0, self._size)           def __str__(self):        """This return following string when we print(Agent)"""        return f"Agent at coordinates ({self.__x}, {self.__y}). Stores: \            {self.store}."                @property    def y(self):        return self.__y        @y.setter    def set_y(self, y):        self.__y = y            @y.getter    def get_y(self):        return self.__y        @property    def x(self):        return self.__x        @y.setter    def set_x(self, x):        self.__x = x            @y.getter    def get_x(self):        return self.__x    def distance_between(self, agent):        """ Finds the distance between the current agent and another agents_a"""        return(((self.__x - agent.__x)**2) +     ((self.__y - agent.__y)**2))**0.5    def move(self):        """        This function randomly moves the agent in the x or y direction by         1 unit each time it is called.        """        if random.random() < 0.5:            self.__y = (self.__y + 1) % (self._size - 1)        else:            self.__y = (self.__y - 1) % (self._size - 1)                if random.random() < 0.5:            self.__x = (self.__x +1) % (self._size - 1)        else:            self.__x = (self.__x -1) % (self._size - 1)                                    def eat(self): # can you make it eat what is left?        """         If there are 10 or more units of resources, this function depletes the        resources in the environment by 10 units if an Agent has landed there,        and makes them store 10.         """        if self.environment[self.__y][self.__x] >= 10:            self.environment[self.__y][self.__x] -= 10            self.store += 10        else:            self.store += self.environment[self.__y][self.__x]            self.environment[self.__y][self.__x] = 0            def share_with_neighbours(self, neighbourhood):        '''This function looks for other agents that are at a distance of        neighbourhood, and will share in equal parts its store (of food).'''        for agent in self.agents:            if self.distance_between(agent) <= neighbourhood:                tot = self.store + agent.store                average = tot/2                self.store = average                agent.store = average            else:                pass                                                    